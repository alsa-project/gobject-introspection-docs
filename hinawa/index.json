{"meta":{"ns":"Hinawa","version":"3.0","generator":"gi-docgen","generator-version":"2023.1"},"symbols":[{"type":"class","name":"FwFcp","ctype":"HinawaFwFcp","summary":"A FCP transaction executor to node in IEEE 1394 ..."},{"type":"class","name":"FwNode","ctype":"HinawaFwNode","summary":"An event listener for FireWire node A [class@FwNode] is ..."},{"type":"class","name":"FwReq","ctype":"HinawaFwReq","summary":"A transaction executor to a FireWire unit. A HinawaFwReq ..."},{"type":"class","name":"FwResp","ctype":"HinawaFwResp","summary":"A transaction responder for request initiated by node in ..."},{"type":"class","name":"SndDg00x","ctype":"HinawaSndDg00x","summary":"A notification listener for Digidesign Digi 00x models. A ..."},{"type":"class","name":"SndDice","ctype":"HinawaSndDice","summary":"A notification listener for Dice models. A [class@SndDice] listen ..."},{"type":"class","name":"SndEfw","ctype":"HinawaSndEfw","summary":"A transaction executor for Fireworks models. A [class@SndEfw] is ..."},{"type":"class","name":"SndMotu","ctype":"HinawaSndMotu","summary":"A notification listener for Motu models. A [class@SndMotu] is ..."},{"type":"class","name":"SndTscm","ctype":"HinawaSndTscm","summary":"A state reader for Tascam FireWire models A [class@SndTscm] ..."},{"type":"class","name":"SndUnit","ctype":"HinawaSndUnit","summary":"An event listener for ALSA FireWire sound devices. This ..."},{"type":"content","name":"Overview","href":"overview.html","summary":" This library gives some objects for abstraction to ..."},{"type":"ctor","name":"new","type_name":"FwFcp","ident":"hinawa_fw_fcp_new","summary":"Instantiate [class@FwFcp] object and return the instance."},{"type":"ctor","name":"new","type_name":"FwNode","ident":"hinawa_fw_node_new","summary":"Instantiate [class@FwNode] object and return the instance."},{"type":"ctor","name":"new","type_name":"FwReq","ident":"hinawa_fw_req_new","summary":"Instantiate [class@FwReq] object and return the instance."},{"type":"ctor","name":"new","type_name":"FwResp","ident":"hinawa_fw_resp_new","summary":"Instantiate [class@FwResp] object and return the instance."},{"type":"ctor","name":"new","type_name":"SndDg00x","ident":"hinawa_snd_dg00x_new","summary":"Instantiate [class@SndDg00x] object and return the instance."},{"type":"ctor","name":"new","type_name":"SndDice","ident":"hinawa_snd_dice_new","summary":"Instantiate [class@SndDice] object and return the instance."},{"type":"ctor","name":"new","type_name":"SndEfw","ident":"hinawa_snd_efw_new","summary":"Instantiate [class@SndEfw] object and return the instance."},{"type":"ctor","name":"new","type_name":"SndMotu","ident":"hinawa_snd_motu_new","summary":"Instantiate [class@SndMotu] object and return the instance."},{"type":"ctor","name":"new","type_name":"SndTscm","ident":"hinawa_snd_tscm_new","summary":"Instantiate [class@SndTscm] object and return the instance."},{"type":"ctor","name":"new","type_name":"SndUnit","ident":"hinawa_snd_unit_new","summary":"Instantiate [class@SndUnit] object and return the instance."},{"type":"ctor","name":"new","type_name":"CycleTime","ident":"hinawa_cycle_time_new","summary":"Allocate and return an instance of [struct@CycleTime]."},{"type":"ctor","name":"new","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_new","summary":"Instantiate [struct@SndMotuRegisterDspParameter] object and return the instance."},{"type":"domain","name":"FwFcpError","ctype":"HinawaFwFcpError","summary":"A set of error code for [struct@GLib.Error] with domain ..."},{"type":"domain","name":"FwNodeError","ctype":"HinawaFwNodeError","summary":"A set of error code for [struct@GLib.Error] with domain ..."},{"type":"domain","name":"FwReqError","ctype":"HinawaFwReqError","summary":"A set of error code for [class@Hinawa.FwReq]. Each of ..."},{"type":"domain","name":"FwRespError","ctype":"HinawaFwRespError","summary":"A set of error code for [struct@GLib.Error] with domain ..."},{"type":"domain","name":"SndDiceError","ctype":"HinawaSndDiceError","summary":"A set of error code for [structGLib.Error] with domain ..."},{"type":"domain","name":"SndUnitError","ctype":"HinawaSndUnitError","summary":"A set of error code for [struct@GLib.Error] with domain ..."},{"type":"enum","name":"FwRcode","ctype":"HinawaFwRcode","summary":"A representation for rcode of asynchronous transaction on IEEE ..."},{"type":"enum","name":"FwTcode","ctype":"HinawaFwTcode","summary":"A representation for tcode of asynchronous transaction on IEEE ..."},{"type":"enum","name":"SndEfwStatus","ctype":"HinawaSndEfwStatus","summary":"A set of status code for Echo Audio Fireworks Transaction."},{"type":"enum","name":"SndUnitType","ctype":"HinawaSndUnitType","summary":"A representation of type for sound unit defined by ..."},{"type":"method","name":"avc_transaction","type_name":"FwFcp","ident":"hinawa_fw_fcp_avc_transaction","summary":"Finish the pair of asynchronous transaction for AV/C command ..."},{"type":"method","name":"avc_transaction_with_tstamp","type_name":"FwFcp","ident":"hinawa_fw_fcp_avc_transaction_with_tstamp","summary":"Finish the pair of asynchronous transaction for AV/C command ..."},{"type":"method","name":"bind","type_name":"FwFcp","ident":"hinawa_fw_fcp_bind","summary":"Start to listen to FCP responses."},{"type":"method","name":"command","type_name":"FwFcp","ident":"hinawa_fw_fcp_command","summary":"Transfer command frame for FCP. When receiving response frame ..."},{"type":"method","name":"command_with_tstamp","type_name":"FwFcp","ident":"hinawa_fw_fcp_command_with_tstamp","summary":"Transfer command frame for FCP. When receiving response frame ..."},{"type":"method","name":"compute_tstamp","type_name":"CycleTime","ident":"hinawa_cycle_time_compute_tstamp","summary":"Compute second count and cycle count from unsigned 16 ..."},{"type":"method","name":"create_source","type_name":"FwNode","ident":"hinawa_fw_node_create_source","summary":"Create [struct@GLib.Source] for [struct@GLib.MainContext] to dispatch events for the ..."},{"type":"method","name":"create_source","type_name":"SndUnit","ident":"hinawa_snd_unit_create_source","summary":"Create [struct@GLib.Source] for [struct@GLib.MainContext] to dispatch events for the ..."},{"type":"method","name":"get_clock_id","type_name":"CycleTime","ident":"hinawa_cycle_time_get_clock_id","summary":"Get the ID of clock for timestamp."},{"type":"method","name":"get_config_rom","type_name":"FwNode","ident":"hinawa_fw_node_get_config_rom","summary":"Get cached content of configuration ROM aligned to big-endian."},{"type":"method","name":"get_fields","type_name":"CycleTime","ident":"hinawa_cycle_time_get_fields","summary":"Get the value of cycle time in 1394 OHCI ..."},{"type":"method","name":"get_headphone_output_paired_assignment","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_get_headphone_output_paired_assignment","summary":"Get the array with elements for the data of ..."},{"type":"method","name":"get_headphone_output_paired_volume","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_get_headphone_output_paired_volume","summary":"Get the array with elements for the data of ..."},{"type":"method","name":"get_input_flag","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_get_input_flag","summary":"Get the array with elements for the data of ..."},{"type":"method","name":"get_input_gain_and_invert","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_get_input_gain_and_invert","summary":"Get the array with elements for input gain and ..."},{"type":"method","name":"get_line_input_boost_flag","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_get_line_input_boost_flag","summary":"Get the data for flags of line input boost. ..."},{"type":"method","name":"get_line_input_nominal_level_flag","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_get_line_input_nominal_level_flag","summary":"Get the data for flags of line input nominal ..."},{"type":"method","name":"get_main_output_paired_volume","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_get_main_output_paired_volume","summary":"Get the array with elements for the data of ..."},{"type":"method","name":"get_mixer_output_paired_flag","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_get_mixer_output_paired_flag","summary":"Get the array with elements for the data of ..."},{"type":"method","name":"get_mixer_output_paired_volume","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_get_mixer_output_paired_volume","summary":"Get the array with elements for the data of ..."},{"type":"method","name":"get_mixer_source_flag","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_get_mixer_source_flag","summary":"Get the array with elements for the data of ..."},{"type":"method","name":"get_mixer_source_gain","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_get_mixer_source_gain","summary":"Get the array with elements for the data of ..."},{"type":"method","name":"get_mixer_source_paired_balance","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_get_mixer_source_paired_balance","summary":"Get the array with elements for the data of ..."},{"type":"method","name":"get_mixer_source_paired_width","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_get_mixer_source_paired_width","summary":"Get the array with elements for the data of ..."},{"type":"method","name":"get_mixer_source_pan","type_name":"SndMotuRegisterDspParameter","ident":"hinawa_snd_motu_register_dsp_parameter_get_mixer_source_pan","summary":"Get the array with elements for the data of ..."},{"type":"method","name":"get_node","type_name":"SndUnit","ident":"hinawa_snd_unit_get_node","summary":"Retrieve an instance of [class@FwNode] associated to the given unit."},{"type":"method","name":"get_raw","type_name":"CycleTime","ident":"hinawa_cycle_time_get_raw","summary":"Get the value of cycle time in 1394 OHCI controller."},{"type":"method","name":"get_req_frame","type_name":"FwResp","ident":"hinawa_fw_resp_get_req_frame","summary":"Retrieve byte frame to be requested."},{"type":"method","name":"get_state","type_name":"SndTscm","ident":"hinawa_snd_tscm_get_state","summary":"Get the latest states of target device."},{"type":"method","name":"get_system_time","type_name":"CycleTime","ident":"hinawa_cycle_time_get_system_time","summary":"Get system time with enough size of strorage. The ..."},{"type":"method","name":"lock","type_name":"SndUnit","ident":"hinawa_snd_unit_lock","summary":"Disallow corresponding ALSA driver to start packet streaming."},{"type":"method","name":"open","type_name":"FwNode","ident":"hinawa_fw_node_open","summary":"Open Linux FireWire character device to operate node on ..."},{"type":"method","name":"open","type_name":"SndDg00x","ident":"hinawa_snd_dg00x_open","summary":"Open ALSA hwdep character device and check it for ..."},{"type":"method","name":"open","type_name":"SndDice","ident":"hinawa_snd_dice_open","summary":"Open ALSA hwdep character device and check it for ..."},{"type":"method","name":"open","type_name":"SndEfw","ident":"hinawa_snd_efw_open","summary":"Open ALSA hwdep character device and check it for ..."},{"type":"method","name":"open","type_name":"SndMotu","ident":"hinawa_snd_motu_open","summary":"Open ALSA hwdep character device and check it for ..."},{"type":"method","name":"open","type_name":"SndTscm","ident":"hinawa_snd_tscm_open","summary":"Open ALSA hwdep character device and check it for ..."},{"type":"method","name":"open","type_name":"SndUnit","ident":"hinawa_snd_unit_open","summary":"Open ALSA hwdep character device and check it for ..."},{"type":"method","name":"read_command_dsp_meter","type_name":"SndMotu","ident":"hinawa_snd_motu_read_command_dsp_meter","summary":"Read data of meter information for command DSP models."},{"type":"method","name":"read_cycle_time","type_name":"FwNode","ident":"hinawa_fw_node_read_cycle_time","summary":"Read current value of CYCLE_TIME register in 1394 OHCI controller."},{"type":"method","name":"read_register_dsp_meter","type_name":"SndMotu","ident":"hinawa_snd_motu_read_register_dsp_meter","summary":"Read data of meter information for register DSP models."},{"type":"method","name":"read_register_dsp_parameter","type_name":"SndMotu","ident":"hinawa_snd_motu_read_register_dsp_parameter","summary":"Read parameter for register DSP models."},{"type":"method","name":"release","type_name":"FwResp","ident":"hinawa_fw_resp_release","summary":"stop to listen to a range of address in ..."},{"type":"method","name":"request","type_name":"FwReq","ident":"hinawa_fw_req_request","summary":"Execute request subaction of transactions to the given node ..."},{"type":"method","name":"reserve","type_name":"FwResp","ident":"hinawa_fw_resp_reserve","summary":"Start to listen to a range of address in ..."},{"type":"method","name":"reserve_within_region","type_name":"FwResp","ident":"hinawa_fw_resp_reserve_within_region","summary":"Start to listen to range of address equals to ..."},{"type":"method","name":"set_resp_frame","type_name":"FwResp","ident":"hinawa_fw_resp_set_resp_frame","summary":"Register byte frame as response."},{"type":"method","name":"transaction","type_name":"FwFcp","ident":"hinawa_fw_fcp_transaction","summary":"Finish the pair of command and response transactions for ..."},{"type":"method","name":"transaction","type_name":"FwReq","ident":"hinawa_fw_req_transaction","summary":"Execute request subaction of transaction to the given node ..."},{"type":"method","name":"transaction","type_name":"SndDice","ident":"hinawa_snd_dice_transaction","summary":"Execute write transactions to the given address, then wait ..."},{"type":"method","name":"transaction","type_name":"SndEfw","ident":"hinawa_snd_efw_transaction","summary":"Transfer request of transaction according to Echo Fireworks Transaction ..."},{"type":"method","name":"transaction_async","type_name":"FwReq","ident":"hinawa_fw_req_transaction_async","summary":"Execute request subaction of transactions to the given node ..."},{"type":"method","name":"transaction_async","type_name":"SndEfw","ident":"hinawa_snd_efw_transaction_async","summary":"Transfer asynchronous transaction for command frame of Echo Fireworks ..."},{"type":"method","name":"transaction_sync","type_name":"FwReq","ident":"hinawa_fw_req_transaction_sync","summary":"Execute request subaction of transaction to the given node ..."},{"type":"method","name":"transaction_sync","type_name":"SndEfw","ident":"hinawa_snd_efw_transaction_sync","summary":"Transfer asynchronous transaction for command frame of Echo Fireworks ..."},{"type":"method","name":"transaction_with_tstamp","type_name":"FwReq","ident":"hinawa_fw_req_transaction_with_tstamp","summary":"Execute request subaction of transaction to the given node ..."},{"type":"method","name":"unbind","type_name":"FwFcp","ident":"hinawa_fw_fcp_unbind","summary":"Stop to listen to FCP responses."},{"type":"method","name":"unlock","type_name":"SndUnit","ident":"hinawa_snd_unit_unlock","summary":"Allow corresponding ALSA driver to start packet streaming."},{"type":"property","name":"bus-manager-node-id","type_name":"FwNode","summary":"Node ID of node which plays role of bus ..."},{"type":"property","name":"card","type_name":"SndUnit","summary":"No description available."},{"type":"property","name":"device","type_name":"SndUnit","summary":"No description available."},{"type":"property","name":"generation","type_name":"FwNode","summary":"Current generation of bus topology."},{"type":"property","name":"guid","type_name":"SndUnit","summary":"No description available."},{"type":"property","name":"ir-manager-node-id","type_name":"FwNode","summary":"Node ID of node which plays role of isochronous ..."},{"type":"property","name":"is-bound","type_name":"FwFcp","summary":"Whether this protocol is bound to any instance of HinawaFwNode."},{"type":"property","name":"is-reserved","type_name":"FwResp","summary":"Whether a range of address is reserved or not ..."},{"type":"property","name":"local-node-id","type_name":"FwNode","summary":"Node ID of node which application uses to communicate ..."},{"type":"property","name":"node-id","type_name":"FwNode","summary":"Node ID of node associated to instance of object ..."},{"type":"property","name":"offset","type_name":"FwResp","summary":"The start offset of reserved address range."},{"type":"property","name":"root-node-id","type_name":"FwNode","summary":"Node ID of root node in bus topology at ..."},{"type":"property","name":"streaming","type_name":"SndUnit","summary":"No description available."},{"type":"property","name":"timeout","type_name":"FwFcp","summary":"Since 1.4"},{"type":"property","name":"timeout","type_name":"FwReq","summary":"No description available."},{"type":"property","name":"type","type_name":"SndUnit","summary":"No description available."},{"type":"property","name":"width","type_name":"FwResp","summary":"The width of reserved address range."},{"type":"record","name":"CycleTime","ctype":"HinawaCycleTime","summary":"A boxed object to express data of cycle time. ..."},{"type":"record","name":"SndMotuRegisterDspParameter","ctype":"HinawaSndMotuRegisterDspParameter","summary":"A boxed object for container of parameter in register ..."},{"type":"signal","name":"bus-update","type_name":"FwNode","summary":"Emitted when IEEE 1394 bus is updated. Handlers can ..."},{"type":"signal","name":"control","type_name":"SndTscm","summary":"Emitted when TASCAM FireWire unit transfer control message. is emitted."},{"type":"signal","name":"disconnected","type_name":"FwNode","summary":"Emitted when the node is not available anymore due ..."},{"type":"signal","name":"disconnected","type_name":"SndUnit","summary":"Emitted when the sound card is not available anymore ..."},{"type":"signal","name":"lock-status","type_name":"SndUnit","summary":"Emitted when corresponding ALSA driver changes status of lock ..."},{"type":"signal","name":"message","type_name":"SndDg00x","summary":"Emitted when Dg00x models transfer notification."},{"type":"signal","name":"notified","type_name":"SndDice","summary":"Emitted when Dice unit transfers notification."},{"type":"signal","name":"notified","type_name":"SndMotu","summary":"Emitted when Motu models transfer notification."},{"type":"signal","name":"register-dsp-changed","type_name":"SndMotu","summary":"Emitted when MOTU register DSP models transfer events by ..."},{"type":"signal","name":"requested","type_name":"FwResp","summary":"Emitted when any node transfers requests to the range ..."},{"type":"signal","name":"requested2","type_name":"FwResp","summary":"Emitted when any node transfers request subaction to the ..."},{"type":"signal","name":"requested3","type_name":"FwResp","summary":"Emitted when any node transfers request subaction to the ..."},{"type":"signal","name":"responded","type_name":"FwFcp","summary":"Emitted when the node transfers asynchronous packet as response ..."},{"type":"signal","name":"responded","type_name":"FwReq","summary":"Emitted when the unit transfers asynchronous packet as response ..."},{"type":"signal","name":"responded","type_name":"SndEfw","summary":"Emitted when the unit transfers asynchronous packet as response ..."},{"type":"signal","name":"responded2","type_name":"FwFcp","summary":"Emitted when the node transfers asynchronous packet as response ..."},{"type":"signal","name":"responded2","type_name":"FwReq","summary":"Emitted when the unit transfers asynchronous packet as response ..."},{"type":"type_func","name":"error_quark","type_name":"SndEfw","ident":"hinawa_snd_efw_error_quark","summary":"Return the [alias@GLib.Quark] for error domain of [struct@GLib.Error] which ..."},{"type":"type_func","name":"parse_tstamp","type_name":"CycleTime","ident":"hinawa_cycle_time_parse_tstamp","summary":"Parse second count and cycle count from unsigned 16 ..."},{"type":"type_func","name":"quark","type_name":"FwFcpError","ident":"hinawa_fw_fcp_error_quark","summary":"Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code in Hinawa.FwFcpError."},{"type":"type_func","name":"quark","type_name":"FwNodeError","ident":"hinawa_fw_node_error_quark","summary":"Return the [alias@GLib.Quark] for [struct@GLib.Error] with Hinawa.FwNodeError domain."},{"type":"type_func","name":"quark","type_name":"FwReqError","ident":"hinawa_fw_req_error_quark","summary":"Return the [alias@GLib.Quark] for [struct@GLib.Error] with code of [enum@FwRcode]."},{"type":"type_func","name":"quark","type_name":"FwRespError","ident":"hinawa_fw_resp_error_quark","summary":"Return the [alias@GLib.Quark] for error domain of [struct@GLib.Error] which ..."},{"type":"type_func","name":"quark","type_name":"SndDiceError","ident":"hinawa_snd_dice_error_quark","summary":"Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code in Hinawa.SndDiceError."},{"type":"type_func","name":"quark","type_name":"SndUnitError","ident":"hinawa_snd_unit_error_quark","summary":"Return the [alias@GLib.Quark] for [struct@GLib.Error] which has code in Hinawa.SndUnitError."},{"type":"vfunc","name":"bus_update","type_name":"FwNode","summary":"Class closure for the [signal@FwNode::bus-update]."},{"type":"vfunc","name":"control","type_name":"SndTscm","summary":"Class closure for the [signal@SndTscm::control] signal."},{"type":"vfunc","name":"disconnected","type_name":"FwNode","summary":"Class closure for the [signal@FwNode::disconnected]."},{"type":"vfunc","name":"disconnected","type_name":"SndUnit","summary":"Class closure for the [signal@SndUnit::disconnected]."},{"type":"vfunc","name":"lock_status","type_name":"SndUnit","summary":"Class closure for the [signal@SndUnit::lock-status],"},{"type":"vfunc","name":"message","type_name":"SndDg00x","summary":"Class closure for the [signal@SndDg00x::message] signal."},{"type":"vfunc","name":"notified","type_name":"SndDice","summary":"Class closure for the [signal@SndDice::notified]."},{"type":"vfunc","name":"notified","type_name":"SndMotu","summary":"Class closure for the [signal@SndMotu::notified] signal."},{"type":"vfunc","name":"register_dsp_changed","type_name":"SndMotu","summary":"Class closure for the [signal@SndMotu::register-dsp-changed] signal."},{"type":"vfunc","name":"requested","type_name":"FwResp","summary":"Class closure for the [signal@FwResp::requested] signal."},{"type":"vfunc","name":"requested2","type_name":"FwResp","summary":"Class closure for the [signal@FwResp::requested2] signal."},{"type":"vfunc","name":"requested3","type_name":"FwResp","summary":"Class closure for the [signal@FwResp::requested3] signal."},{"type":"vfunc","name":"responded","type_name":"FwFcp","summary":"Class closure for the [signal@FwFcp::responded] signal."},{"type":"vfunc","name":"responded","type_name":"FwReq","summary":"Class closure for the [signal@FwReq::responded] signal."},{"type":"vfunc","name":"responded","type_name":"SndEfw","summary":"Class closure for the [signal@SndEfw::responded] signal."},{"type":"vfunc","name":"responded2","type_name":"FwFcp","summary":"Class closure for the [signal@FwFcp::responded2] signal."},{"type":"vfunc","name":"responded2","type_name":"FwReq","summary":"Class closure for the [signal@FwReq::responded2] signal."}],"terms":{}}